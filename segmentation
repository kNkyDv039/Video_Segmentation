import cv2
import numpy as np
from sklearn.cluster import KMeans

def apply_segmentation(frame, num_clusters=5):
    """
    Apply image segmentation to a frame using k-means clustering.
    """
    # Reshape the frame to 2D
    frame_2D = frame.reshape((-1, 3))

    # Convert to float
    frame_2D = np.float32(frame_2D)

    # Define k-means model
    kmeans = KMeans(n_clusters=num_clusters)

    # Fit k-means model to the 2D frame
    kmeans.fit(frame_2D)

    # Get the segmented labels
    labels = kmeans.labels_

    # Reshape the labels back to 2D
    labels_2D = labels.reshape(frame.shape[:2])

    # Create a new blank image for the segmented image
    segmented_image = np.zeros_like(frame, dtype=np.uint8)

    # Define HSV colors for each cluster
    colors = [((i * 180) // num_clusters, 255, 255) for i in range(num_clusters)]

    # Assign each pixel in the segmented image a color based on its cluster
    for i in range(num_clusters):
       segmented_image[labels_2D == i] = colors[i]

    # Convert HSV to BGR for display
    segmented_image = cv2.cvtColor(segmented_image, cv2.COLOR_HSV2BGR)

    return segmented_image, labels_2D

def overlay_percentage(frame, percentage_matrix):
    """
    Overlay percentage matrix on the frame.
    """
    h, w, _ = frame.shape
    overlay = frame.copy()

    for i, percentage in enumerate(percentage_matrix):
        cv2.putText(overlay, f"Segment {i + 1}: {percentage:.2f}%", (10, 30 + i * 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)

    alpha = 0.7  # Transparency factor
    cv2.addWeighted(overlay, alpha, frame, 1 - alpha, 0, frame)

def segment_video():
    """
    Capture video from the laptop camera and apply image segmentation to each frame.
    """
    # Open the laptop camera
    cap = cv2.VideoCapture(0)

    # Check if the camera is opened successfully
    if not cap.isOpened():
        print("Error: Could not open the laptop camera.")
        return

    # Define the number of clusters for segmentation
    num_clusters = 5

    # Initialize percentage matrix
    percentage_matrix = np.zeros(num_clusters)

    while(True):
        # Capture frame-by-frame
        ret, frame = cap.read()

        # Apply segmentation to the frame
        segmented_frame, labels = apply_segmentation(frame, num_clusters)

        # Calculate percentage matrix
        total_pixels = labels.size
        for i in range(num_clusters):
            segment_pixels = np.sum(labels == i)
            percentage_matrix[i] = (segment_pixels / total_pixels) * 100

        # Overlay percentage matrix on the frame
        overlay_percentage(segmented_frame, percentage_matrix)

        # Display the segmented frame with overlay
        cv2.imshow('Segmented Video', segmented_frame)

        # Break the loop if 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera and close all windows
    cap.release()
    cv2.destroyAllWindows()

# Call the function to start the segmentation
segment_video()
